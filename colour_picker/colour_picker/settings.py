"""
Django settings for colour_picker project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
        },
    },
}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

from dotenv import load_dotenv
load_dotenv()
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'colour-picker-me33.onrender.com']


# Application definition

INSTALLED_APPS = [
    'colour_picker_app.apps.ColourPickerAppConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'colour_picker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'colour_picker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': os.environ.get("USER"),
        'PASSWORD': os.environ.get("PASS"),
        'HOST': os.environ.get("HOST"),
        'PORT': os.environ.get("PORT_DB")
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AWS Config
if DEBUG==False:
    if os.environ.get("AWS_ACCESS_KEY") and os.environ.get("AWS_SECRET_KEY") and os.environ.get("AWS_BUCKET_NAME") and os.environ.get("AWS_S3_DOMAIN"):
        AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY")
        AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_KEY")
        AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
        AWS_DEFAULT_ACL = 'public-read'
        AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_BUCKET_NAME")
        AWS_S3_CUSTOM_DOMAIN = os.environ.get("AWS_S3_DOMAIN")
        AWS_S3_FILE_OVERWRITE = False

        AWS_LOCATION = 'static'
        STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'

        PUBLIC_MEDIA_LOCATION = 'media'
        MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'

        STORAGES = {
            #Media files
            "default": {
                "BACKEND": "colour_picker.storage_backends.PublicMediaStorage"
            },

            #css, js etc
            "staticfiles": {
                "BACKEND": "colour_picker.storage_backends.StaticStorage"
            }
        }

elif DEBUG==True:
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, "static")

    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    MEDIA_URL = "/media/"



# USE_S3 = os.environ.get('USE_S3') == 'TRUE'

# if USE_S3:
#     # aws settings
#     AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY')
#     AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_KEY')
#     AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_BUCKET_NAME')
#     AWS_DEFAULT_ACL = 'public-read'
#     AWS_S3_CUSTOM_DOMAIN = os.environ.get("AWS_S3_DOMAIN")
#     AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}

#     # s3 static settings
#     AWS_LOCATION = 'static'
#     STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'

#     # s3 public media settings
#     PUBLIC_MEDIA_LOCATION = 'media'
#     MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
#     STORAGES = {
#         #Media files
#         "default": {
#             "BACKEND": "colour_picker.storage_backends.PublicMediaStorage"
#         },

#         #css, js etc
#         "staticfiles": {
#             "BACKEND": "colour_picker.storage_backends.StaticStorage"
#         }
#     }

# else:
#     STATIC_URL = 'staticfiles/'
#     STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
#    # MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#     MEDIA_URL = 'mediafiles/'

# STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

